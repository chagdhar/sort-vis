{"version":3,"sources":["SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["winHeight","window","innerHeight","MIN_SIZE","Math","floor","MAX_SIZE","width","NO_OF_BARS","innerWidth","setWidth","Sorter","props","handleChange","value","setState","barnum","state","array","colors","this","resetArray","min","max","console","log","i","random","j","temp","sleep","className","map","idx","key","style","backgroundColor","height","margin","borderRadius","onClick","bubbleSort","type","step","onChange","values","target","React","Component","ms","Promise","resolve","setTimeout","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sRAWMA,G,MAAYC,OAAOC,aACnBC,EAAWC,KAAKC,MAAgB,GAAVL,GACtBM,EAAWF,KAAKC,MAAgB,IAAVL,GAMtBO,EAwGN,SAAkBC,GACd,OAAOJ,KAAKC,MAAOJ,OAAOQ,WAAaD,EAAY,GAzGzCE,CAfG,IAkBIC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAgDVC,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVC,OAAQF,KAhDZ,EAAKG,MAAQ,CACTC,MAAO,GACPC,OAAQ,GACRH,OAzBK,IAmBM,E,gEAWfI,KAAKC,e,mCAIL,IAyFWC,EAAKC,EAzFVL,EAAQ,GACRC,EAAS,GACRH,EAAUI,KAAKH,MAAfD,OACPQ,QAAQC,IAAIT,GACZ,IAAK,IAAIU,EAAI,EAAGA,EAAIV,EAAQU,IACxBR,EAAMQ,IAoFCJ,EApFcnB,EAoFToB,EApFmBjB,EAqFhCF,KAAKC,MAAOD,KAAKuB,UAAUJ,EAAID,EAAI,GAAMA,IApFxCH,EAAOO,GAtCG,YAwCdN,KAAKL,SAAS,CAACG,QAAOC,a,6JAIjBD,EAASE,KAAKH,MAAdC,MACAF,EAAUI,KAAKH,MAAfD,OACAG,EAAUC,KAAKH,MAAfE,OAKGO,EAAEV,E,YAAQU,GAAG,G,iBACTE,EAAE,E,YAAEA,EAAEF,G,sBACPR,EAAMU,GAAIV,EAAMU,EAAE,I,wBACbC,EAAOX,EAAMU,GACjBV,EAAMU,GAAKV,EAAMU,EAAE,GACnBV,EAAMU,EAAE,GAAKC,EACbT,KAAKL,SAAS,CAACG,U,UACTY,EAAM,K,QANJF,I,uBAShBT,EAAOO,EAAE,GA3DA,QA4DTN,KAAKL,SAAS,CAACI,W,QAXKO,I,qJAqBlB,IAAD,OACER,EAASE,KAAKH,MAAdC,MACAC,EAAUC,KAAKH,MAAfE,OAGP,OACI,oCACI,yBAAKY,UAAU,aACZb,EAAMc,KAAI,SAAClB,EAAOmB,GAAR,OACT,yBACEF,UAAU,MACVG,IAAKD,EACLE,MAAO,CACLC,gBAAgB,GAAD,OAAKjB,EAAOc,IAC3BI,OAAO,GAAD,OAAKvB,EAAL,MACNP,MAAM,GAAD,OAAKA,EAAL,MACL+B,OAAO,GAAD,OAAK/B,EAAL,MACNgC,aAAa,GAAD,OAAKhC,EAAL,aAIpB,yBAAKwB,UAAU,QACX,4BAAQA,UAAU,MAAMS,QAAS,kBAAM,EAAKnB,eAA5C,sBACA,4BAAQU,UAAU,MAAMS,QAAS,kBAAK,EAAKC,eAA3C,eACA,2BACIC,KAAK,QACLX,UAAU,SAEVT,IAAK,GACLC,IAAK,IACLoB,KAAM,GACNC,SAAU,SAACC,GACP,EAAK9B,SAAS,CACVC,OAAQ6B,EAAOC,OAAOhC,QAE1B,EAAKO,sB,GA3FG0B,IAAMC,WA6G1C,SAASlB,EAAMmB,GACX,OAAO,IAAIC,SACT,SAAAC,GAAO,OAAIC,WAAWD,EAASF,MCzHtBI,MARf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,QCKcuB,QACW,cAA7BrD,OAAOsD,SAASC,UAEe,UAA7BvD,OAAOsD,SAASC,UAEhBvD,OAAOsD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.5920ea05.chunk.js","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\n\n\nvar NO_OF_BARS = 20;\n\nconst PRIMARY_COLOR = \"indianred\";\n//const SECONDARY_COLOR = \"indigo\";\nconst SORTING_DONE = \"green\";\n\n// need to set the MIN and MAX sizes wrt the screen\nconst winHeight = window.innerHeight;\nconst MIN_SIZE = Math.floor(winHeight*0.1);\nconst MAX_SIZE = Math.floor(winHeight*0.85);\n\n\n//const marginSize = 10; // in pixels ;; change margin: field down in the bar div \n//const width = Math.floor((window.innerWidth / NO_OF_BARS)/3); //- 2*marginSize); ?? I want marginsize = width of eachbar \n\nconst width = setWidth(NO_OF_BARS);\n//wrote function as i need to set later\n\nexport default class Sorter extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n            colors: [],\n            barnum: NO_OF_BARS,\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        const colors = [];\n        const {barnum} = this.state;\n        console.log(barnum);\n        for (let i = 0; i < barnum; i++) {\n            array[i] = randomInt(MIN_SIZE, MAX_SIZE);\n            colors[i] = PRIMARY_COLOR;\n        }\n        this.setState({array, colors});\n    }\n\n    async bubbleSort() {\n        var {array} = this.state;\n        var {barnum} = this.state;\n        var {colors} = this.state;\n        \n        //var barArray = document.getElementsByClassName(\"bar\");\n        //console.log(barArray);\n        \n        for(var i=barnum; i>=0; i--) {\n            for(var j=0;j<i;j++){\n                if(array[j]> array[j+1]) {                   \n                    let temp = array[j];\n                    array[j] = array[j+1];\n                    array[j+1] = temp;\n                    this.setState({array});\n                    await sleep(200);\n                }\n            }\n            colors[i-1] = SORTING_DONE;\n            this.setState({colors});\n        }\n    }\n\n    handleChange = (value) => {\n        this.setState({\n            barnum: value\n        })\n    }\n\n    render() {\n        const {array} = this.state;\n        const {colors} = this.state;\n        //const {barnum} = this.state;\n\n        return (\n            <>\n                <div className=\"container\">\n                  {array.map((value, idx) => (\n                    <div\n                      className=\"bar\"\n                      key={idx}\n                      style={{\n                        backgroundColor: `${colors[idx]}`,\n                        height: `${value}px`,\n                        width: `${width}px`,\n                        margin: `${width}px`,\n                        borderRadius: `${width}px`,\n                      }}></div>\n                  ))}\n                </div>\n                <div className=\"menu\">\n                    <button className=\"btn\" onClick={() => this.resetArray()}>Generate New Array</button>\n                    <button className=\"btn\" onClick={()=>(this.bubbleSort())}>BUBBLE SORT</button>\n                    <input \n                        type=\"range\" \n                        className=\"slider\"\n                        \n                        min={10}\n                        max={200}\n                        step={10}\n                        onChange={(values)=>{\n                            this.setState({\n                                barnum: values.target.value,\n                            });\n                            this.resetArray();  \n                        }}\n                    /> \n                </div>\n                \n            </>\n        );\n    }\n} \n\nfunction setWidth(NO_OF_BARS) {\n    return(Math.floor((window.innerWidth / NO_OF_BARS)/3));\n}\n\nfunction randomInt(min, max) {\n    return Math.floor((Math.random()*(max-min+1)) + min);\n}\n\nfunction sleep(ms) {\n    return new Promise(\n      resolve => setTimeout(resolve, ms)\n    );\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}